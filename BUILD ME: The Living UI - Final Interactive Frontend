Instructions for Execution Agent: This document contains the complete and final code for the interactive InstaBids frontend. Your task is to overwrite the existing files within the ui/ directory with the code provided below. This new code implements the real-time WebSocket connection and agent-aware components required for a live user experience.Part A: Real-time State Management & Hooks1. File: ui/src/hooks/useAgentSwarmSocket.ts (New Hook)This hook establishes the WebSocket connection and manages the real-time state of the swarm.// ui/src/hooks/useAgentSwarmSocket.ts
import { useState, useEffect, useCallback } from 'react';
import { z } from 'zod';

const AgentStateSchema = z.object({
  id: z.string(),
  type: z.string(),
  status: z.enum(['idle', 'processing', 'waiting', 'active', 'error']),
  currentTask: z.string().optional(),
});
type AgentState = z.infer<typeof AgentStateSchema>;

const SwarmUpdateSchema = z.object({
  type: z.literal('swarm_status'),
  payload: z.array(AgentStateSchema),
});

const ProjectUpdateSchema = z.object({
  type: z.literal('project_update'),
  payload: z.object({
    projectId: z.string(),
    stage: z.string(),
    message: z.string(),
  }),
});

const IncomingMessageSchema = z.union([SwarmUpdateSchema, ProjectUpdateSchema]);

export function useAgentSwarmSocket(projectId: string | null) {
  const [agents, setAgents] = useState<AgentState[]>([]);
  const [projectStage, setProjectStage] = useState('intake');
  const [lastMessage, setLastMessage] = useState<string>('');
  const [isConnected, setIsConnected] = useState(false);

  const handleMessage = useCallback((event: MessageEvent) => {
    try {
      const parsedData = JSON.parse(event.data);
      const message = IncomingMessageSchema.parse(parsedData);

      if (message.type === 'swarm_status') {
        setAgents(message.payload);
      } else if (message.type === 'project_update' && message.payload.projectId === projectId) {
        setProjectStage(message.payload.stage);
        setLastMessage(message.payload.message);
      }
    } catch (error) {
      console.error("WebSocket message parse error:", error);
    }
  }, [projectId]);

  useEffect(() => {
    if (!projectId) return;

    // In a real app, this URL comes from an environment variable.
    const ws = new WebSocket('ws://localhost:8000/ws/' + projectId);

    ws.onopen = () => setIsConnected(true);
    ws.onclose = () => setIsConnected(false);
    ws.onmessage = handleMessage;

    return () => {
      ws.close();
    };
  }, [projectId, handleMessage]);

  return { agents, projectStage, lastMessage, isConnected };
}
Part B: API and Main Application2. File: ui/src/pages/api/projects/submit.ts (No Changes)(The existing API route is correct. It successfully publishes the initial event to Redis, which is its only job.)3. File: ui/src/pages/index.tsx (Updated to manage state)// ui/src/pages/index.tsx
import React, { useState } from 'react';
import { ProjectIntakeForm } from '@/components/ProjectIntakeForm';
import { AgentSwarmVisualizer } from '@/components/AgentSwarmVisualizer';
import { ProjectStatusDisplay } from '@/components/ProjectStatusDisplay';
import { useAgentSwarmSocket } from '@/hooks/useAgentSwarmSocket';

const HomePage = () => {
    const [projectId, setProjectId] = useState<string | null>(null);
    const { agents, projectStage, lastMessage, isConnected } = useAgentSwarmSocket(projectId);

    return (
        <div className="min-h-screen bg-gray-100 font-sans">
            <div className="container mx-auto p-4 sm:p-8">
                <header className="text-center mb-12">
                    <h1 className="text-4xl md:text-5xl font-bold text-gray-800">InstaBids Living UI</h1>
                    <p className="text-lg text-gray-600 mt-3 max-w-2xl mx-auto">
                        Interact directly with the agent swarm and see them work on your project in real-time.
                    </p>
                </header>
                <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
                    <div className="lg:col-span-3 bg-white p-6 sm:p-8 rounded-xl shadow-lg border border-gray-200">
                        {!projectId ? (
                            <ProjectIntakeForm onSubmissionSuccess={setProjectId} />
                        ) : (
                            <ProjectStatusDisplay
                                projectId={projectId}
                                stage={projectStage}
                                lastMessage={lastMessage}
                            />
                        )}
                    </div>
                    <div className="lg:col-span-2 bg-gray-50 p-6 sm:p-8 rounded-xl border border-gray-200">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-2xl font-semibold text-gray-700">Live Agent Swarm</h2>
                            <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} title={isConnected ? 'Connected' : 'Disconnected'}></div>
                        </div>
                        <AgentSwarmVisualizer agents={agents} />
                    </div>
                </div>
            </div>
        </div>
    );
};
export default HomePage;
Part C: Interactive & Agent-Aware Components4. File: ui/src/components/ProjectIntakeForm.tsx (Updated to pass up Project ID)// ui/src/components/ProjectIntakeForm.tsx
import React, { useState } from 'react';

interface ProjectIntakeFormProps {
    onSubmissionSuccess: (projectId: string) => void;
}

export const ProjectIntakeForm: React.FC<ProjectIntakeFormProps> = ({ onSubmissionSuccess }) => {
    const [status, setStatus] = useState<'idle' | 'submitting' | 'error'>('idle');
    const [error, setError] = useState<string | null>(null);

    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setStatus('submitting');
        setError(null);
        const formData = new FormData(event.currentTarget);
        const submissionData = {
            project_id: `proj_${new Date().getTime()}`,
            contact_info: {
                first_name: formData.get('first_name') as string,
                last_name: formData.get('last_name') as string,
                email: formData.get('email') as string,
                phone: formData.get('phone') as string,
                zip_code: formData.get('zip_code') as string,
            },
            project_details: { raw_description: formData.get('raw_description') as string }
        };

        try {
            const response = await fetch('/api/projects/submit', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(submissionData),
            });
            if (!response.ok) throw new Error((await response.json()).error || 'Failed to submit.');
            const result = await response.json();
            onSubmissionSuccess(result.projectId); // Pass the ID to the parent
        } catch (err: any) {
            setStatus('error');
            setError(err.message);
        }
    };
    
    // The form itself remains the same
    return (
        <form onSubmit={handleSubmit} className="space-y-6">
            <div className="text-center">
                <h3 className="text-2xl font-bold text-gray-800">1. Describe Your Project</h3>
            </div>
            <textarea name="raw_description" rows={8} placeholder="e.g., 'I want to remodel my master bathroom...'" required className="w-full p-3 border rounded-md"/>
            <h3 className="text-2xl font-bold text-gray-800 text-center">2. Your Contact Information</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input name="first_name" type="text" placeholder="First Name" required className="p-3 border rounded-md"/>
                <input name="last_name" type="text" placeholder="Last Name" required className="p-3 border rounded-md"/>
                <input name="email" type="email" placeholder="Email Address" required className="p-3 border rounded-md"/>
                <input name="phone" type="tel" placeholder="Phone Number" required className="p-3 border rounded-md"/>
            </div>
            <input name="zip_code" type="text" placeholder="Project Zip Code" required className="w-full p-3 border rounded-md"/>
            {status === 'error' && <p className="text-red-600 bg-red-100 p-3 rounded-md">{error}</p>}
            <button type="submit" disabled={status === 'submitting'} className="w-full bg-blue-600 text-white p-4 rounded-md font-bold text-lg hover:bg-blue-700 transition disabled:bg-gray-400">
                {status === 'submitting' ? 'Submitting...' : 'Activate Agent Swarm'}
            </button>
        </form>
    );
};
5. File: ui/src/components/AgentSwarmVisualizer.tsx (Updated to accept live data)// ui/src/components/AgentSwarmVisualizer.tsx
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface Agent {
    id: string;
    type: string;
    status: string;
}

interface AgentSwarmVisualizerProps {
    agents: Agent[];
}

export const AgentSwarmVisualizer: React.FC<AgentSwarmVisualizerProps> = ({ agents }) => {
    const getStatusStyles = (status: string) => {
        switch (status) {
            case 'processing': return { borderColor: '#3b82f6', textColor: 'text-blue-600' };
            case 'active': return { borderColor: '#16a34a', textColor: 'text-green-600' };
            case 'waiting': return { borderColor: '#f59e0b', textColor: 'text-yellow-600' };
            default: return { borderColor: '#9ca3af', textColor: 'text-gray-500' };
        }
    };

    return (
        <div className="relative h-96 w-full flex items-center justify-center bg-dots">
            <style jsx>{`.bg-dots { background-image: radial-gradient(#d1d5db 1px, transparent 1px); background-size: 20px 20px; }`}</style>
            <AnimatePresence>
                {agents.map((agent, index) => {
                    const angle = (index / agents.length) * 2 * Math.PI - Math.PI / 2;
                    const radius = agents.length > 1 ? 120 : 0;
                    const x = radius * Math.cos(angle);
                    const y = radius * Math.sin(angle);
                    const { borderColor, textColor } = getStatusStyles(agent.status);
                    return (
                        <motion.div key={agent.id} initial={{ opacity: 0, scale: 0.5 }} animate={{ opacity: 1, scale: 1, x, y }} exit={{ opacity: 0, scale: 0.5 }} transition={{ type: "spring", stiffness: 260, damping: 20 }} className="absolute flex flex-col items-center group">
                            <div className="relative">
                                <div className="w-24 h-24 bg-white rounded-full border-4 flex items-center justify-center shadow-md" style={{ borderColor }}>
                                    <div className="text-center">
                                        <div className="font-bold text-base text-gray-800">{agent.type}</div>
                                        <div className="text-xs text-gray-500">{agent.id.split('_')[1]}</div>
                                    </div>
                                </div>
                                {agent.status === 'processing' && <div className="absolute top-0 right-0 -mt-1 -mr-1 w-4 h-4 rounded-full bg-blue-500 animate-ping" />}
                            </div>
                            <div className={`mt-2 text-sm font-semibold capitalize ${textColor}`}>{agent.status}</div>
                        </motion.div>
                    );
                })}
            </AnimatePresence>
            {agents.length === 0 && <p className="text-gray-500">Awaiting project submission...</p>}
        </div>
    );
};
6. File: ui/src/components/ProjectStatusDisplay.tsx (New Component)This component replaces the form after submission and provides a conversational interface.// ui/src/components/ProjectStatusDisplay.tsx
import React from 'react';
import { motion } from 'framer-motion';

interface ProjectStatusDisplayProps {
    projectId: string;
    stage: string;
    lastMessage: string;
}

export const ProjectStatusDisplay: React.FC<ProjectStatusDisplayProps> = ({ projectId, stage, lastMessage }) => {
    // This is a simplified chat interface. A real implementation would use
    // the CopilotKit chat components for a richer experience.
    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="space-y-6"
        >
            <div className="text-center">
                <h3 className="text-2xl font-bold text-gray-800">Project In Progress</h3>
                <p className="text-sm text-gray-500 font-mono mt-1">ID: {projectId}</p>
            </div>

            <div className="p-4 bg-gray-50 border rounded-lg h-64 overflow-y-auto flex flex-col space-y-4">
                {/* Message History would be rendered here */}
                {lastMessage && (
                     <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="p-3 bg-blue-100 text-blue-800 rounded-lg max-w-md"
                    >
                       <p className="font-semibold">Agent Message:</p>
                       <p>{lastMessage}</p>
                    </motion.div>
                )}
            </div>

            <div>
                <input
                    type="text"
                    placeholder="Type your reply to the agent..."
                    className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
                    // onChange and onKeyDown would be used to send messages back to the swarm
                />
            </div>

            <div className="text-center text-gray-600">
                Current Stage: <span className="font-semibold capitalize">{stage.replace('_', ' ')}</span>
            </div>
        </motion.div>
    );
};
